import { useState } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import styled from "styled-components"
import { toast } from "react-hot-toast";

import { api, type RouterOutputs } from "../utils/api";
import { Header } from "../components/Header";
import { NoteEditor } from "../components/NoteEditor";
import { NoteCard } from "../components/NoteCard";
import { Modal } from "../components/Modal";
import { TopicSelector } from "../components/TopicSelector";
import { boolean } from "zod";

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;



// type Topic = RouterOutputs["topic"]["getAll"][0];
// Chirp tutorial uses 
type Topic = RouterOutputs["topic"]["getAll"][number];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [isActive, setIsActive] = useState(false);


  const { data: topics, refetch: refetchTopics } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
    onError: (e) => {
      // const errorMessage = e.data?.zodError?.fieldErrors.content;
      // if (errorMessage && errorMessage[0]) {
      //   toast.error(errorMessage[0]);
      // } else {
      //   toast.error("Failed to post! Please try again later.");
      // }
      // toast.error("Failed to Post! Please try again later");
    },
  });

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      setSelectedTopic(null);
      void refetchTopics();
    },
  });


  // const getTopicById = api.topic.getTopicById.useQuery(
  //   {
  //     topicId: selectedTopic?.id ?? "",
  //   },
  //   {
  //     enabled: sessionData?.user !== undefined && selectedTopic !== null,
  //   }
  // );

  // const { mutate, isLoading: isPosting } = api.posts.create.useMutation({
  //   onSuccess: () => {
  //     setInput("");
  //     void ctx.posts.getAll.invalidate();
  //   },
  //   onError: (e) => {
  //     const errorMessage = e.data?.zodError?.fieldErrors.content;
  //     if (errorMessage && errorMessage[0]) {
  //       toast.error(errorMessage[0]);
  //     } else {
  //       toast.error("Failed to post! Please try again later.");
  //     }
  //     // toast.error("Failed to Post! Please try again later");
  //   },
  // });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const createNote = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
    onError: (e) => {
      // const errorMessage = e.data?.zodError?.fieldErrors.content;
      // if (errorMessage && errorMessage[0]) {
      //   toast.error(errorMessage[0]);
      // } else {
      //   toast.error("Failed to post! Please try again later.");
      // }
      // toast.error("Failed to Post! Please try again later");
    },
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const handleClick = (event: React.MouseEvent<Element, MouseEvent>, topic: Topic) => {
    console.log('element clicked');
    event.preventDefault();

    setSelectedTopic(topic);
    // console.log(`topic set to ${topic.title}`)
    // console.log(topic)
    setIsActive(isActive => !isActive);
    if (topic.id === selectedTopic?.id) {
      console.log(`topic is same as selected topic!!!`)
    }
    else {
      console.log(topic);
      console.log(selectedTopic);
    }
  };


  return (
    <div className="mx-5 mt-5 grid grid-cols-2 gap-2">
      <div id="rightOptions" className="px-2 col-span-1">
        {selectedTopic && < label htmlFor="my-modal-4" className="btn" > Add Note </label >}
        <ul className="menu rounded-box w-56 bg-base-100 p-2">
          {topics?.map((topic) => (
            <li key={topic.id}>
              <div className="grid grid-cols-5 gap-3">

                {/* <div */}
                {/*   id="topicDiv" */}
                {/*   className="col-span-4 bg-indigo-400 " */}
                {/* // style={{ */}
                {/* //   backgroundColor: isActive ? 'salmon' : '', */}
                {/* //   color: isActive ? 'white' : '', */}
                {/* // }} */}
                {/* > */}
                {/* <TopicSelector> */}
                <TopicSelector handleClick={(event, topic) => handleClick(event, topic)} topic={topic} isSelected={topic.id === selectedTopic?.id} />
                {/* <a */}
                {/*   id="topicAnchor" */}
                {/**/}
                {/*   className="col-span-4 bg-indigo-400 " */}
                {/*   // className={isActive ? "bg-sky-400" : ""} */}
                {/*   href="#" */}
                {/*   onClick={(evt) => { */}
                {/*     evt.preventDefault(); */}
                {/*     // console.log(`topic set to ${topic.title}`) */}
                {/*     // console.log(topic) */}
                {/*     setSelectedTopic(topic); */}
                {/*     // setIsActive(isActive => !isActive); */}
                {/*     if (topic.id === selectedTopic?.id) { */}
                {/*       console.log(`topic is same as selected topic!!!`) */}
                {/*     } */}
                {/*     else { */}
                {/*       console.log(topic); */}
                {/*       console.log(selectedTopic); */}
                {/*     } */}
                {/*   }} */}
                {/* > */}
                {/*   {topic.title} */}
                {/* </a> */}
                {/* </TopicSelector> */}

                {/* </div> */}
                <div className="col-span-1">
                  <button
                    onClick={() => void deleteTopic.mutate({ id: topic.id })}
                    className="btn-warning btn-xs btn px-5"
                  >
                    delete
                  </button>
                </div>
              </div>
            </li>
          ))}
        </ul>
        <div className="divider"></div>
        <input
          type="text"
          placeholder="New Topic"
          className="input-bordered input input-sm w-full"
          onKeyDown={(e) => {
            if (e.key === "Enter") {
              createTopic.mutate({
                title: e.currentTarget.value,
              });
              e.currentTarget.value = "";
            }
          }}
        />
      </div>
      <div id="noteDiv" className="col-span-1">
        <div>

          {(notes && notes.length > 0) ? notes.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
                note={note}
                // topic={topics?.find((element) => element.id === note.topicId)}
                onDelete={() => void deleteNote.mutate({ id: note.id })}
              />
            </div>
          )) : <div>You don&apos;t have any notes</div>}
        </div>
        <Modal>
          <NoteEditor
            onSave={({ title, content }) => {
              void createNote.mutate({
                title,
                content,
                topicId: selectedTopic?.id ?? "",
              });
            }}
          />
        </Modal>
      </div>
    </div>
  );
};
