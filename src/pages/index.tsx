import { useState, FocusEvent, TransitionEvent } from "react";
import { useRef, forwardRef, useEffect } from "react";
import { type NextPage } from "next";
import Head from "next/head";
import { useSession } from "next-auth/react";
import { api, type RouterOutputs } from "../utils/api";
import { Header } from "~/components/Header";
import { NoteEditor } from "~/components/NoteEditor";
import { NoteCard } from "~/components/NoteCard";
import { Modal } from "~/components/Modal";
import { TopicSelector } from "~/components/TopicSelector";
// import { LoadingPage, LoadingSpinner } from "~/components/loading";
import { LoadingPage } from "../components/LoadingSpinner";
import { toast } from "react-hot-toast";

type Note = RouterOutputs["note"]["getAll"][0];

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notetaker</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <Header />
        <Content />
      </main>
    </>
  );
};

export default Home;



// type Topic = RouterOutputs["topic"]["getAll"][0];
// Chirp tutorial uses 
type Topic = RouterOutputs["topic"]["getAll"][number];
// daniel bark video 


const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [isActive, setIsActive] = useState(false);


  const { data: topics, refetch: refetchTopics, isLoading: topicsLoading } = api.topic.getAll.useQuery(

    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const createTopic = api.topic.create.useMutation({
    onSuccess: () => {
      void refetchTopics();
    },
    onError: (e) => {
      // const errorMessage = e.data?.zodError?.fieldErrors.content;
      // if (errorMessage && errorMessage[0]) {
      //   toast.error(errorMessage[0]);
      // } else {
      //   toast.error("Failed to post! Please try again later.");
      // }
      // toast.error("Failed to Post! Please try again later");
    },
  });

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      setSelectedTopic(null);
      void refetchTopics();
    },
  });

  const { data: notes, refetch: refetchNotes } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? "",
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  const getNoteById = api.note.getById.useQuery(
    "clhnuouv60001ml082drg4grb",
    {
      enabled: sessionData?.user !== undefined,
    }
  );

  // const createNote = api.note.create.useMutation({
  const { mutate, isLoading: isCreatingNote } = api.note.create.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
    onError: (e) => {
      const errorMessage = e.data?.zodError?.fieldErrors.title;
      if (errorMessage && errorMessage[0]) {
        toast.error(errorMessage[0]);
      } else {
        toast.error("Failed to create note! Please try again later.");
      }
    }
  });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const handleClick = (event: React.MouseEvent<Element, MouseEvent>, topic: Topic) => {
    event.preventDefault();
    setSelectedTopic(topic);
  };


  // void getNoteById.query("123")

  const Topics = () => {
    if (topicsLoading) {

      return (
        <div className="flex grow">
          <LoadingPage />
        </div>
      )
    }
    return (
      <ul className="menu rounded-box w-56 bg-base-100 p-2">
        {
          topics?.map((topic) => (
            <li key={topic.id}>
              <div className="grid grid-cols-5 gap-3">
                <TopicSelector handleClick={(event, topic) => handleClick(event, topic)} topic={topic} isSelected={topic.id === selectedTopic?.id} />
                <div className="col-span-1">
                  <button
                    onClick={() => void deleteTopic.mutate({ id: topic.id })}
                    className="btn-warning btn-xs btn px-5"
                  >
                    delete
                  </button>
                </div>
              </div>
            </li>
          ))}
      </ul>
    )
  }

  const Notes = () => {
    return (
      <div>
        {(notes && notes.length > 0) ? notes.map((note) => (
          <div key={note.id} className="mt-5">
            <NoteCard
              note={note}
              // topic={topics?.find((element) => element.id === note.topicId)}
              onDelete={() => void deleteNote.mutate({ id: note.id })}
            />
          </div>
        )) : <>
          <span>You don&apos;t have any notes on  </span><span className="font-bold">{selectedTopic?.title}</span>
        </>}
      </div>
    )
  }

  const CreateTopicButton = () => {
    // const ref = useRef<HTMLInputElement>(null);
    //
    // useEffect(() => {
    //   if (ref.current) {
    //     ref.current.focus();
    //   }
    // }, [])

    return (
      <input
        type="text"
        // ref={ref}
        placeholder="New Topic"
        className="input-bordered input input-sm w-full"
        onKeyDown={(e) => {
          if (e.key === "Enter") {
            createTopic.mutate({
              title: e.currentTarget.value,
            });
            e.currentTarget.value = "";
          }
        }}
      />
    )
  }

  const Hero = () => {
    return (
      <div className="hero min-h-screen bg-base-200">
        <div className="hero-content text-center">
          <div className="max-w-md">
            <h1 className="text-5xl font-bold">Welcome to Notetaker</h1>
            <p className="py-6">Please login to see your notes</p>
            {/* <button className="btn btn-primary">Get Started</button> */}
          </div>
        </div>
      </div>
    )
  }

  const [isModalOpen, setIsModalOpen] = useState(false);
  const handleShowModal = (e: TransitionEvent<HTMLLabelElement>) => {
    e.preventDefault();

    if (e.propertyName === 'transform') {
      console.log('test')
      console.log('event is', e.propertyName)
      setIsModalOpen((isModalOpen) => {
        return !isModalOpen
      })
    }
  }

  return (
    <div>
      {sessionData ?
        (<div className="mx-5 mt-5 grid grid-cols-2 gap-2">
          <div id="leftOptions" className="px-2 col-span-1">
            {selectedTopic && < label htmlFor="my-modal-4" className="btn"  > Add Note </label >}
            <Topics />

            <div className="divider"></div>
            <CreateTopicButton />
          </div>
          <div id="rightDiv" className="col-span-1">
            <Notes />
            <Modal setIsVisible={handleShowModal}>
              <NoteEditor
                isOpen={isModalOpen}
                onSave={({ title, content }) => {
                  void mutate({
                    title,
                    content,
                    topicId: selectedTopic?.id ?? "",
                  });
                }}
              />
            </Modal>
          </div>

          {isCreatingNote && (
            <div className="flex items-center justify-center">
              <LoadingPage />
            </div>
          )}
        </div>) : (
          <Hero />
        )
      }
    </div>
  );

};
