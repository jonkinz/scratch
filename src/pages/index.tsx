import { useState } from 'react';
import type { NextPage } from 'next';
import Head from 'next/head';
import Image from 'next/image';
import { useSession } from 'next-auth/react';
import { api, type RouterOutputs } from '../utils/api';
import { Header } from '~/components/Header';
import { NoteEditor } from '~/components/NoteEditor';
import { NoteCard } from '~/components/NoteCard';
import { Modal } from '~/components/Modal';
import { TopicSelector } from '~/components/TopicSelector';
import { LoadingPage } from '~/components/LoadingSpinner';
import { toast } from 'react-hot-toast';

const Home: NextPage = () => {
  return (
    <>
      <Head>
        <title>Notetaker 2</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
<<<<<<< HEAD
      <Header />
      <main className="mx-auto max-w-4xl ">
        <section
          id="hero"
          className="mb-12 flex scroll-mt-40 flex-col-reverse items-center justify-center gap-8 p-6 sm:flex-row"
        >
          <article className="sm:w-1/2">
            <h2 className="max-w-md text-center text-4xl font-bold text-slate-900 dark:text-white sm:text-left sm:text-5xl">
              We Boldly go{' '}
              <span className="text-indigo-700 dark:text-indigo-300">
                Where No Rocket
              </span>{' '}
              Has Gone Before...
            </h2>
            <p className="mt-4 max-w-md text-center text-2xl text-slate-700 dark:text-slate-400 sm:text-left">
              We're building rockets for the next centry today. From the moon to
              Mars, Jupiter and beyond...
            </p>
            <p className="mt-4 max-w-md text-center text-2xl text-slate-700 dark:text-slate-400 sm:text-left">
              Think Acme Rockets.
            </p>
          </article>
          {/* <img src="./img/blueBook.png" alt="Rocket Dab" className="w-1/2" /> */}
          <Image
            src="/img/rocketdab.png"
            alt="Rocket Dab"
            width={400}
            height={400}
            className="w-1/2"
          />
          {/* <qtatusBar /> */}
          {/* <Content /> */}
          <footer className="sticky bottom-0 h-1 bg-white" />
        </section>
        <hr className="mx-auto w-1/2 bg-black dark:bg-white" />
        <section id="rockets" className="my-12 scroll-mt-20 p-6">
          <h2 className="mb-6 text-center text-4xl font-bold text-slate-900 dark:text-white sm:text-5xl">
            Our Rockets
          </h2>
          <ul className="mx-auto my-12 flex list-none flex-col items-center gap-8 sm:flex-row">
            <li className="flex w-2/3 flex-col items-center rounded-3xl border border-solid border-slate-900 bg-white px-2 py-6 shadow-xl dark:border-gray-100 dark:bg-black sm:w-5/6">
              <Image
                width={100}
                height={100}
                className="mb-6 w-1/2"
                src="/img/rocketride.png"
                alt="Adventure"
              ></Image>
              <h3 className="text-center text-3xl text-slate-900 dark:text-white">
                Explorer
              </h3>
              <p className="mt-2 hidden text-center text-3xl text-slate-500 dark:text-slate-400 dark:text-white sm:block">
                $
              </p>
              <p className="mt-2 text-center text-2xl text-slate-500 dark:text-slate-400 dark:text-white sm:hidden">
                Exploration
              </p>
            </li>
            <li className="flex w-2/3 flex-col items-center rounded-3xl border border-solid border-slate-900 bg-white px-2 py-6 shadow-xl dark:border-gray-100 dark:bg-black sm:w-5/6">
              <Image
                width={100}
                height={100}
                className="mb-6 w-1/2"
                src="/img/rocketman.png"
                alt=""
              ></Image>
              <h3 className="text-center text-3xl text-slate-900 dark:text-white">
                Adventurer
              </h3>
              <p className="mt-2 hidden text-center text-3xl text-slate-500 dark:text-slate-400 dark:text-white sm:block">
                $$
              </p>
              <p className="mt-2 text-center text-2xl text-slate-500 dark:text-slate-400 dark:text-white sm:hidden">
                Affordable Exploration
              </p>
            </li>
            <li className="flex w-2/3 flex-col items-center rounded-3xl border border-solid border-slate-900 bg-white px-2 py-6 shadow-xl dark:border-gray-100 dark:bg-black sm:w-5/6">
              <Image
                width={100}
                height={100}
                className="mb-6 w-1/2"
                src="/img/rocketlaunch.png"
                alt="Infinity"
              ></Image>
              <h3 className="text-center text-3xl text-slate-900 dark:text-white">
                Infinity
              </h3>
              <p className="mt-2 hidden text-center text-3xl text-slate-500 dark:text-slate-400 dark:text-white sm:block">
                $$$
              </p>
              <p className="mt-2 text-center text-2xl text-slate-500 dark:text-slate-400 dark:text-white sm:hidden">
                Luxury Starship
              </p>
            </li>
          </ul>
        </section>

        <hr className="mx-auto w-1/2 bg-black dark:bg-white" />
        <section id="testimonials" className="my-12 p-6">
          <h2 className="mb-6 text-center text-4xl font-bold text-slate-900 dark:text-white sm:text-5xl">
            Testimonials
          </h2>
        </section>
        <hr className="mx-auto w-1/2 bg-black dark:bg-white" />
        <section id="contact" className="my-12 p-6">
          <h2 className="mb-6 text-center text-4xl font-bold text-slate-900 dark:text-white sm:text-5xl">
            Contact Us
          </h2>
        </section>
=======
      <main>
        <Header />
        {/* <qtatusBar /> */}
        <Content />
>>>>>>> parent of bf38df7... Starting work on this again, looking at re-doing the css, using a YT tailwind tutorial from D.Gray.
      </main>
    </>
  );
};

export default Home;

// type Topic = RouterOutputs["topic"]["getAll"][0];
// Chirp tutorial uses
type Topic = RouterOutputs['topic']['getAll'][number];
// daniel bark video
type Note = RouterOutputs['note']['getAll'][0];

const Content: React.FC = () => {
  const { data: sessionData } = useSession();

  const [selectedTopic, setSelectedTopic] = useState<Topic | null>(null);
  const [selectedNote, setSelectedNote] = useState<Note | null>(null);

  const {
    data: topics,
    refetch: refetchTopics,
    isLoading: isTopicsLoading,
    status,
  } = api.topic.getAll.useQuery(
    undefined, // no input
    {
      enabled: sessionData?.user !== undefined,
      onSuccess: (data) => {
        setSelectedTopic(selectedTopic ?? data[0] ?? null);
      },
    }
  );

  const { mutate: createTopic, isLoading: isCreatingTopic } =
    api.topic.create.useMutation({
      onSuccess: (data) => {
        toast.success('topic created!');
        void refetchTopics();
        setSelectedTopic(selectedTopic ?? data ?? null);
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.content;
        if (errorMessage && errorMessage[0]) {
          toast.error(errorMessage[0]);
        } else {
          toast.error('Could not create topic');
        }
      },
    });

  const deleteTopic = api.topic.delete.useMutation({
    onSuccess: () => {
      toast.success('topic deleted');
      setSelectedTopic(null);
      void refetchTopics();
    },
  });

  const {
    refetch: refetchNotes,
    data: notes,
    isLoading: isNotesLoading,
  } = api.note.getAll.useQuery(
    {
      topicId: selectedTopic?.id ?? '',
    },
    {
      enabled: sessionData?.user !== undefined && selectedTopic !== null,
    }
  );

  // const { getNoteByid } = api.note.getById.useQuery({
  //   note: note.id,
  // }).data;

  const { mutate: createNote, isLoading: isCreatingNote } =
    api.note.create.useMutation({
      onSuccess: (data) => {
        void refetchNotes();
        void refetchTopics();
        setSelectedNote(selectedNote ?? data ?? null);
        toast.success('note created!');
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.title;
        if (errorMessage && errorMessage[0]) {
          toast.error(errorMessage[0]);
        } else {
          toast.error('Failed to create note! Please try again later.');
        }
      },
    });

  const { mutate: updateNote, isLoading: isUpdatingNote } =
    api.note.update.useMutation({
      onSuccess: () => {
        toast.success('note updated!');
        void refetchNotes();
      },
      onError: (e) => {
        const errorMessage = e.data?.zodError?.fieldErrors.title;
        if (errorMessage && errorMessage[0]) {
          toast.error(errorMessage[0]);
        } else {
          toast.error('Failed to create note! Please try again later.');
        }
      },
    });

  const deleteNote = api.note.delete.useMutation({
    onSuccess: () => {
      void refetchNotes();
    },
  });

  const handleClick = (event: React.MouseEvent, topic: Topic) => {
    event.preventDefault();
    setSelectedTopic(topic);
  };

  const Topics = () => {
    if ('fetching' === fetchStatus || isTopicsLoading) {
      return (
        <div className="flex grow">
          <LoadingPage />
        </div>
      );
    }
    return (
      <>
        {topics?.length ? (
          <ul className="menu rounded-box w-56 bg-base-100 p-2">
            {topics?.map((topic) => (
              <li key={topic.id} style={{ height: '40px' }}>
                <div id="topicDiv" className="">
                  <TopicSelector
                    handleClick={(event, topic) => {
                      handleClick(event, topic);
                    }}
                    topic={topic}
                    isSelected={topic.id === selectedTopic?.id}
                  />
                  <div className="">
                    <button
                      onClick={() => {
                        deleteTopic.mutate({ id: topic.id });
                      }}
                      className="btn btn-warning btn-xs px-5"
                    >
                      delete
                    </button>
                  </div>
                </div>
              </li>
            ))}
          </ul>
        ) : null}
      </>
    );
  };

  const Notes = () => {
    return (
      <div>
        {notes && notes.length > 0 ? (
          notes.map((note) => (
            <div key={note.id} className="mt-5">
              <NoteCard
                note={note}
                onDelete={() => {
                  deleteNote.mutate({ id: note.id });
                }}
                editNote={(note) => {
                  setSelectedNote(note);
                  setIsShowModal(true);
                }}
              />
            </div>
          ))
        ) : (
          <>
            <span>You don&apos;t have any notes on </span>
            <span className="font-bold">{selectedTopic?.name}</span>
          </>
        )}
      </div>
    );
  };

  const CreateTopicButton = () => {
    return (
      <input
        type="text"
        // ref={ref}
        placeholder="New Topic"
        className="input input-bordered input-sm w-full"
        onKeyDown={(e) => {
          if (e.key === 'Enter') {
            createTopic({
              name: e.currentTarget.value,
            });
            e.currentTarget.value = '';
          }
        }}
      />
    );
  };

  const Hero = () => {
    return (
      <div className="hero min-h-screen bg-base-200">
        <div className="hero-content text-center">
          <div className="max-w-md">
            <h1 className="text-5xl font-bold">Welcome to Notetaker</h1>
            <p className="py-6">Please login to see your notes</p>
          </div>
        </div>
      </div>
    );
  };

  type AddNoteButtonProps = {
    styleClass?: string;
    buttonLabel?: string;
  };

  const AddNoteButton = ({
    styleClass = '',
    buttonLabel = 'Add Note',
  }: AddNoteButtonProps) => {
    return (
      <button
        className={`btn btn-primary btn-outline ${styleClass}`}
        onClick={(): void => {
          setSelectedNote(null);
          setIsShowModal(true);
        }}
      >
        {buttonLabel}
      </button>
    );
  };

  // Is the note editor modal currently visible?
  const [isModalVisible, setIsModalVisible] = useState(false);
  // Has the 'Add Note' button been clicked?
  const [isShowModal, setIsShowModal] = useState<boolean>(false);

  const handleIsModalVisible = (isVisible: boolean) => {
    setIsModalVisible(isVisible);
  };

  return (
    <>
      <div tabIndex={0}>
        {/* only show app page if there's a session */}
        {sessionData ? (
          <div className="mx-5 mt-5 grid grid-cols-10 justify-items-center gap-2">
            {/* if there are no topics / notes, just show an add note button */}
            {topics && topics?.length ? (
              <>
                <div id="leftOptions" className="col-span-3 px-2">
                  <CreateTopicButton />
                  <Topics />
                </div>

                <div id="rightDiv" className="col-span-7">
                  {selectedTopic && <AddNoteButton />}
                  {selectedTopic && <Notes />}
                </div>
              </>
            ) : (
              <AddNoteButton styleClass="col-span-10 btn-wide btn-lg" />
            )}
            {/* {topics && topics.length > 0 && ( */}
            {/*   <div id="rightDiv" className="col-span-7"> */}
            {/*     {selectedTopic && <AddNoteButton />} */}
            {/*     {selectedTopic && <Notes />} */}
            {/*   </div> */}
            {/* )} */}
            {isCreatingNote ||
              (isCreatingTopic && (
                <div className="flex items-center justify-center">
                  <LoadingPage />
                </div>
              ))}
            <Modal
              setIsVisible={handleIsModalVisible}
              isVisible={isModalVisible}
              setIsShowModal={setIsShowModal}
              isShowModal={isShowModal}
            >
              <NoteEditor
                topics={topics}
                isOpen={isModalVisible}
                note={selectedNote}
                onSave={({ newTopic, topic, title, content }) => {
                  if (selectedNote) {
                    // update note if there is a selected note
                    updateNote({
                      id: selectedNote.id,
                      title,
                      content,
                      // topicId: selectedTopic?.id ?? '',
                      topicId: topic ?? '',
                    });
                  } else {
                    createNote({
                      title,
                      content,
                      // topicId: selectedTopic?.id ?? '',
                      topicId: topic ?? '',
                      topicName: newTopic,
                    });
                  }
                }}
              />
            </Modal>
          </div>
        ) : (
          <Hero />
        )}
      </div>
    </>
  );
};
